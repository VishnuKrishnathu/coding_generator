{
  "description": "The 4 Sum problem is a classic algorithmic challenge that involves finding all unique quadruplets (four numbers) in an array that add up to a specific target value. Given an array of integers and a target integer, your task is to identify all unique sets of four integers such that their sum equals the target. The solution should handle duplicate values in the input array properly, ensuring that each unique quadruplet is returned only once.",
  "exlpanation": "In the example provided, the input consists of six integers, all of which are 2, and the target sum is 8. The only unique quadruplet that adds up to 8 is (2, 2, 2, 2). Note that despite having many 2's in the array, the output only includes this unique combination.",
  "constraints": ["The length of the input array nums will be between 4 and 200 inclusive.", "Each element in nums will be a 32-bit signed integer.", "The target value will also be a 32-bit signed integer.", "The solution must avoid duplicate quadruplets in the result."],
  "note": "Make sure to sort the input array to facilitate easy duplicate handling and efficient searching. Using a combination of two-pointer technique and hashing can optimize the solution.",
  "function_signature": "def four_sum(nums: List[int], target: int) -> List[List[int]]:",
  "questionCode": [
    { "langauge": "c", "code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid four_sum(int* nums, int numsSize, int target) {\n    // Function logic goes here\n}\n\nint main() {\n    int numsSize;\n    scanf(\"%d\", &numsSize);\n    int* nums = (int*)malloc(numsSize * sizeof(int));\n    for(int i = 0; i < numsSize; i++) {\n        scanf(\"%d\", &nums[i]);\n    }\n    int target;\n    scanf(\"%d\", &target);\n    four_sum(nums, numsSize, target);\n    free(nums);\n    return 0;\n}" },
    { "langauge": "cpp", "code": "#include <iostream>\n#include <vector>\nusing namespace std;\n\nvoid four_sum(vector<int>& nums, int target) {\n    // Function logic goes here\n}\n\nint main() {\n    int numsSize;\n    cin >> numsSize;\n    vector<int> nums(numsSize);\n    for(int i = 0; i < numsSize; i++) {\n        cin >> nums[i];\n    }\n    int target;\n    cin >> target;\n    four_sum(nums, target);\n    return 0;\n}" },
    { "langauge": "java", "code": "import java.util.*;\n\npublic class Main {\n    public static void four_sum(int[] nums, int target) {\n        // Function logic goes here\n    }\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int numsSize = scanner.nextInt();\n        int[] nums = new int[numsSize];\n        for(int i = 0; i < numsSize; i++) {\n            nums[i] = scanner.nextInt();\n        }\n        int target = scanner.nextInt();\n        four_sum(nums, target);\n    }\n}" },
    { "langauge": "python3", "code": "from typing import List\n\ndef four_sum(nums: List[int], target: int) -> List[List[int]]:\n    pass\n\nif __name__ == \"__main__\":\n    numsSize = int(input())\n    nums = list(map(int, input().split()))\n    target = int(input())\n    four_sum(nums, target)" }
  ],
  "solutions": [
    { "langauge": "c", "code": "#include <stdio.h>\n#include <stdlib.h>\n\nvoid four_sum(int* nums, int numsSize, int target) {\n    // Implement the logic for finding quadruplets\n    // This is a placeholder for the actual implementation.\n}\n\nint main() {\n    int n, target;\n    scanf(\"%d\", &n);\n    int* nums = (int*)malloc(n * sizeof(int));\n    for (int i = 0; i < n; i++) {\n        scanf(\"%d\", &nums[i]);\n    }\n    scanf(\"%d\", &target);\n    four_sum(nums, n, target);\n    free(nums);\n    return 0;\n}" },
    { "langauge": "cpp", "code": "#include <iostream>\n#include <vector>\n#include <algorithm>\nusing namespace std;\n\nvector<vector<int>> four_sum(vector<int>& nums, int target) {\n    // Implement the logic for finding quadruplets\n    // This is a placeholder for the actual implementation.\n}\n\nint main() {\n    int n, target;\n    cin >> n;\n    vector<int> nums(n);\n    for (int i = 0; i < n; i++) {\n        cin >> nums[i];\n    }\n    cin >> target;\n    vector<vector<int>> result = four_sum(nums, target);\n    for (const auto& quadruplet : result) {\n        for (int num : quadruplet) {\n            cout << num << \" \";\n        }\n        cout << endl;\n    }\n    return 0;\n}" },
    { "langauge": "java", "code": "import java.util.*;\n\nclass Main {\n    public static List<List<Integer>> fourSum(int[] nums, int target) {\n        // Implement the logic for finding quadruplets\n        // This is a placeholder for the actual implementation.\n    }\n\n    public static void main(String[] args) {\n        Scanner scanner = new Scanner(System.in);\n        int n = scanner.nextInt();\n        int[] nums = new int[n];\n        for (int i = 0; i < n; i++) {\n            nums[i] = scanner.nextInt();\n        }\n        int target = scanner.nextInt();\n        List<List<Integer>> result = fourSum(nums, target);\n        for (List<Integer> quadruplet : result) {\n            for (int num : quadruplet) {\n                System.out.print(num + \" \");\n            }\n            System.out.println();\n        }\n        scanner.close();\n    }\n}" },
    { "langauge": "python3", "code": "from typing import List\n\ndef four_sum(nums: List[int], target: int) -> List[List[int]]:\n    # Implement the logic for finding quadruplets\n    # This is a placeholder for the actual implementation.\n    return []\n\nif __name__ == '__main__':\n    n = int(input())\n    nums = list(map(int, input().split()))\n    target = int(input())\n    result = four_sum(nums, target)\n    for quadruplet in result:\n        print(' '.join(map(str, quadruplet)))" }
  ],
  "test_cases": [
    { "input": "8\n1 0 -1 0 -2 2 3 4\n0\n", "output": "-2 -1 0 1\n" },
    { "input": "6\n2 2 2 2 2 2\n8\n", "output": "2 2 2 2\n" },
    { "input": "5\n1 2 3 4 5\n10\n", "output": "1 2 3 4\n" },
    { "input": "7\n0 0 0 0 0 0 0\n0\n", "output": "0 0 0 0\n" },
    { "input": "10\n-3 -2 -1 0 0 1 2 3 4 5\n0\n", "output": "-3 -2 1 4\n-3 -1 0 4\n-2 -1 0 3\n-2 0 1 1\n" }
  ],
  "private_test_cases": [
    { "input": "10\n-5 -4 -3 -2 -1 0 1 2 3 4\n0\n", "output": "-5 -4 4 5\n-5 -3 3 5\n-5 -2 2 5\n-5 -1 1 5\n" },
    { "input": "12\n1 2 3 4 5 6 7 8 9 10 11 12\n30\n", "output": "6 7 8 9\n" },
    { "input": "15\n-5 -5 -5 -5 -5 0 0 0 0 0 1 1 1 1 1\n-10\n", "output": "-5 -5 -5 -5\n" },
    { "input": "8\n1 2 3 4 5 6 7 8\n20\n", "output": "5 6 7 8\n" },
    { "input": "9\n-1 -1 -1 -1 -1 2 2 2 2\n2\n", "output": "-1 -1 2 2\n" }
  ],
  "sanitized": true
}
